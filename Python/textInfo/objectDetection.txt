Overview
The function processes each video frame using MediaPipe’s EfficientDet model to detect cheating materials.
It maintains a count of detected objects and tracks their disappearance.
Objects must remain undetected for 20 frames (2 seconds at 10 FPS) before they are considered permanently missing.

MediaPipe often expects the model file (e.g., .tflite format) to be available as a local file path, not a URL or file-like object. 
This means that if you're using the model in a packaged environment or loading it from memory (e.g., downloading it from a remote 
source or loading it as a binary blob), MediaPipe will fail to load the model directly unless it’s written to disk first.

TL;DR:
We save the model to a buffer (temporary file) and then pass that file path to the MediaPipe detector because MediaPipe’s internal 
API expects a file path, not a memory stream.(https://github.com/google-ai-edge/mediapipe/issues)

Frame Processing & Object Detection
The function detect_and_draw(frame) runs object detection and returns detected objects.
Objects with a confidence score ≥ 0.35 are considered detected.
If a detected object belongs to CHEATING_MATERIALS, it is flagged as a cheating material.
The detection results are sent to _draw_detections function where around each detection we draw a rectangle bounding box
The cv.putText() function visually annotates the frame with messages like "Laptop detected inside the box" for each detected cheating
object. This provides immediate feedback to the user or invigilator. The text is positioned at the top-left area of the frame, with 
each label spaced vertically using an offset to prevent overlapping.

Tracking Detected Objects
self.previous_objects: Dictionary that tracks detected objects:
First value → Number of frames the object has been detected.
Second value → Number of consecutive frames the object has been missing.
If an object is detected in the current frame:
    If it was previously seen, its detection count is incremented, and its missing count is reset.
    If it is new, it is added to self.previous_objects with an initial value of (1, 0).
    If an object is NOT detected in the current frame:
        Its missing count is incremented.
    If it has been missing for more than 20 frames, it is permanently removed.
Counting Missing Objects:
    If an object appears for the first time in this session, it increments self.object_count[obj].
    Objects are only considered permanently absent if missing for 20 frames (2 seconds).
Displaying Detection Results:
If an object is detected, cv.putText() displays its label in red (0, 0, 255) on the frame.

Why 20 Frames?
The camera operates at 10 FPS, so:
1 second = 10 frames
2 seconds = 20 frames
If an object is not seen for 20 frames, it is considered permanently missing.

Last For Loop Logic
The final for loop ensures that an object is confirmed for at least 1 second before it starts tracking its disappearance:
for obj in detected_labels:
    if self.previous_objects[obj][0] == 10:  # First appearance in this session
        self.object_count[obj] += 1
This means that the object count only increases when an object is first detected and does not increment multiple times for the same 
session.